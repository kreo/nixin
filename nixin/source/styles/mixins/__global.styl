/* ------------------------------------------------------------------------ *\
   structure.mixins.global
\* ------------------------------------------------------------------------ */


/**
 * [pos description]
 * @param  {[type]} type [description]
 * @param  {[type]} args [description]
 * @return {[type]}      [description]
 */
nix-pos(type, args)
  i = 0
  position: unquote(type)
  for j in (1..4)
    if length(args) > i
      {args[i]}: args[i + 1] is a "unit" ? args[i += 1] : 0
    i += 1


/**
 * [getSize description]
 * @param  {[type]} property   [description]
 * @param  {[type]} expression [description]
 * @return {[type]}            [description]
 */
nix-getSize(property, expression)
  property: -webkit-calc(expression)
  property: calc(expression)


/**
 * [replaceInSelector description]
 * @param  {[type]} what [description]
 * @param  {[type]} with =             "" [description]
 * @return {[type]}      [description]
 */
nix-replaceInSelector(what, with = "")
  /{replace(what, with , selector())}
    {block}


/**
 * [getParent description]
 * @param  {[type]} depth =             1 [description]
 * @return {[type]}       [description]
 */
nix-getParent(depth = 1)
  selectors = split(",", selector())
  for selector, i in selectors
    selector = split(" ", selector)
    selector = selector[0..length(selector) - (1 + depth)]
    selectors[i] = join(" ", selector)
  return "/" + join(",", selectors)


/**
 * [calcPercentage description]
 * @param  {[type]} n [description]
 * @return {[type]}   [description]
 */
nix-calcPercentage(n)
  (n * 100) %


/**
 * [calcHalf description]
 * @param  {[type]} n [description]
 * @return {[type]}   [description]
 */
nix-calcHalf(n)
  return round(n / 2)


/**
 * [calcQuarter description]
 * @param  {[type]} n [description]
 * @return {[type]}   [description]
 */
nix-calcQuarter(n)
  return round(n / 4)


/**
 * [calcDouble description]
 * @param  {[type]} n [description]
 * @return {[type]}   [description]
 */
nix-calcDouble(n)
  return round(n * 2)


/**
 * [calcQuadruple description]
 * @param  {[type]} n [description]
 * @return {[type]}   [description]
 */
nix-calcQuadruple(n)
  return round(n * 4)
