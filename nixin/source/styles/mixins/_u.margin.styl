/* ------------------------------------------------------------------------ *\
   mixins.util.margin
\* ------------------------------------------------------------------------ */


/**
 * [set description]
 */
u-margin--set()
  if null in arguments
    margin-top: arguments[0] if arguments[0] != null
    margin-right: arguments[1] if arguments[1] != null
    if length(arguments) == 2
      margin-bottom: arguments[0] if arguments[0] != null
      margin-left: arguments[1] if arguments[1] != null
    else if length(arguments) == 3
      margin-bottom: arguments[2] if arguments[2] != null
      margin-left: arguments[1] if arguments[1] != null
    else if length(arguments) == 4
      margin-bottom: arguments[2] if arguments[2] != null
      margin-left: arguments[3] if arguments[3] != null
  else
    margin: arguments


/**
 * [margin description]
 * @param  {[type]} direction [description]
 * @param  {[type]} size      [description]
 * @return {[type]}           [description]
 */
u-margin(direction, size)
  if direction == "all"
    u-margin--set(size)

  else if direction == "vertical"
    u-margin--set(size null)

  else if direction == "horizontal"
    u-margin--set(null size)

  else if direction == "top"
    u-margin--set(size null null null)

  else if direction == "right"
    u-margin--set(null size null null)

  else if direction == "bottom"
    u-margin--set(null null size null)

  else
    u-margin--set(null null null size)



/**
 * automatic mixins generation
 * u-margin--{direction}(size)
 * u-margin--{direction}--{size}()
 */
for dk in nix.directions
  u-margin--{dk}(size)
    u-margin(dk, size)

  for sk in nix.sizes
    u-margin--{dk}--{sk}()
      u-margin(dk, nix.sizes[sk])


/**
 * [create description]
 * @param  {[type]} selector [description]
 * @return {[type]}          [description]
 */
u-margin--create(selector)
  for dk, dv in nix.directions
    for sk, sv in nix.sizes
      [{selector}~=\"--{dv}--{sk}\"]
        u-margin(dk, sv)
